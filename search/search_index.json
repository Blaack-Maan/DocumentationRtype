{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"Classes/","text":"","title":"Classes"},{"location":"Classes/#_1","text":"","title":""},{"location":"Contributor/","text":"CONTACTS \u260e\ufe0f\ud83d\udc64 \ud83d\udc64 Jean-David BAMENOU Github: [@]() Email: jean-david.bamenou@epitech.eu LinkedIn: Jean-David BAMENOU Instagram: [@]() T\u00e9l\u00e9phone: +229 45 88 55 83 \ud83d\udc64 Wilfrid BINAZON Github: [@]() Email: wilfrid.binazon@epitech.eu LinkedIn: Wilfrid BINAZON Instagram: [@blaack_maan_](https://www.instagram.com/blaack_maan_/) T\u00e9l\u00e9phone: +229 66 87 40 92 \ud83d\udc64 Agbadogbe KAKPO Github: [@]() Email: agbadogbe.kakpo@epitech.eu LinkedIn: Instagram: [@]() T\u00e9l\u00e9phone: +229 69 68 88 70 \ud83d\udc64 Kades KOUKPONOU Github: [@Kadeskouk](https://github.com/Kadeskouk) Email: kades.koukponou@epitech.eu LinkedIn: Kades KOUKPONOU Instagram: [@kades_kouk](https://instagram.com/kades_kouk?igshid=NzZlODBkYWE4Ng%3D%3D&utm_source=qr) T\u00e9l\u00e9phone: +229 95 67 00 10 \ud83d\udc64 Togni AKPO Github: [@]() Email: togni.akpo@epitech.eu LinkedIn: Instagram: [@]() T\u00e9l\u00e9phone: +229 97 65 65 01 \ud83d\udc64 Nicaise GBENOU Github: [@]() Email: nicaise.gbenou@epitech.eu LinkedIn: Instagram: [@]() T\u00e9l\u00e9phone: +229 54 33 02 50","title":"Contributor"},{"location":"Contributor/#_1","text":"","title":""},{"location":"Contributor/#contacts","text":"\ud83d\udc64 Jean-David BAMENOU Github: [@]() Email: jean-david.bamenou@epitech.eu LinkedIn: Jean-David BAMENOU Instagram: [@]() T\u00e9l\u00e9phone: +229 45 88 55 83 \ud83d\udc64 Wilfrid BINAZON Github: [@]() Email: wilfrid.binazon@epitech.eu LinkedIn: Wilfrid BINAZON Instagram: [@blaack_maan_](https://www.instagram.com/blaack_maan_/) T\u00e9l\u00e9phone: +229 66 87 40 92 \ud83d\udc64 Agbadogbe KAKPO Github: [@]() Email: agbadogbe.kakpo@epitech.eu LinkedIn: Instagram: [@]() T\u00e9l\u00e9phone: +229 69 68 88 70 \ud83d\udc64 Kades KOUKPONOU Github: [@Kadeskouk](https://github.com/Kadeskouk) Email: kades.koukponou@epitech.eu LinkedIn: Kades KOUKPONOU Instagram: [@kades_kouk](https://instagram.com/kades_kouk?igshid=NzZlODBkYWE4Ng%3D%3D&utm_source=qr) T\u00e9l\u00e9phone: +229 95 67 00 10 \ud83d\udc64 Togni AKPO Github: [@]() Email: togni.akpo@epitech.eu LinkedIn: Instagram: [@]() T\u00e9l\u00e9phone: +229 97 65 65 01 \ud83d\udc64 Nicaise GBENOU Github: [@]() Email: nicaise.gbenou@epitech.eu LinkedIn: Instagram: [@]() T\u00e9l\u00e9phone: +229 54 33 02 50","title":"CONTACTS \u260e\ufe0f\ud83d\udc64"},{"location":"Engine/","text":"Behind the graphics and functionalities of our R-type product we find a game engine called GH Engine. What is ECS ? \u2699\ufe0f The ECS (Entity Component System) is a design approach for managing game elements in an organized way. It separates data (such as position and velocity) from behaviors (such as movement and rendering). This allows for easier development in smaller pieces, better management of characters and objects, and the creation of interactions between them. In summary, it's a modular approach useful in video games and other fields, divided into three parts: entities, components, and systems. Entities : Entities are objects or elements of the game. For example, in a game, a character, an enemy, an object, or a projectile can be entities. Components : Components are the features or data that describe the entities. For instance, a component could represent the position, velocity, color, or other attributes of an entity. Systems : Systems are pieces of code that perform specific actions on entities that have certain components. For example, a movement system can update the position of entities with a velocity component. Image illustrating an ECS How did we design our ECS ? \ud83d\udee0\ufe0f Already The engine was developed in C++. The entities here have the name Entity. To manage the components, we used a component register called parameters. The parameter is capable of linking an entity to a component, of adding property parameters to settings. It is on the map that the entities appear. What are the properties of our ECS ? \ud83d\udd11 Our ECS contains properties such as the collider which allows you to manage collisions between different elements. In addition, it contains the transform property which allows you to manage the movement. It contains the position of the entities. Integration of property into the ECS. \ud83d\udcdc This is done in such a way that only systems can integrate new properties into the scene. This is to avoid parasitic properties (a property that is not affected and controlled by any system). The entire ECS is focused on the stage. The scene is a class that contains the list of integers that are currently being used. It stores the list of systems that are running. It allows you to create entities and link components to them. It contains the component table.","title":"Engine"},{"location":"Engine/#_1","text":"Behind the graphics and functionalities of our R-type product we find a game engine called GH Engine.","title":""},{"location":"Engine/#what-is-ecs","text":"The ECS (Entity Component System) is a design approach for managing game elements in an organized way. It separates data (such as position and velocity) from behaviors (such as movement and rendering). This allows for easier development in smaller pieces, better management of characters and objects, and the creation of interactions between them. In summary, it's a modular approach useful in video games and other fields, divided into three parts: entities, components, and systems. Entities : Entities are objects or elements of the game. For example, in a game, a character, an enemy, an object, or a projectile can be entities. Components : Components are the features or data that describe the entities. For instance, a component could represent the position, velocity, color, or other attributes of an entity. Systems : Systems are pieces of code that perform specific actions on entities that have certain components. For example, a movement system can update the position of entities with a velocity component. Image illustrating an ECS","title":"  What is ECS ? \u2699\ufe0f "},{"location":"Engine/#how-did-we-design-our-ecs","text":"Already The engine was developed in C++. The entities here have the name Entity. To manage the components, we used a component register called parameters. The parameter is capable of linking an entity to a component, of adding property parameters to settings. It is on the map that the entities appear.","title":"  How did we design our ECS ? \ud83d\udee0\ufe0f "},{"location":"Engine/#what-are-the-properties-of-our-ecs","text":"Our ECS contains properties such as the collider which allows you to manage collisions between different elements. In addition, it contains the transform property which allows you to manage the movement. It contains the position of the entities.","title":"  What are the properties of our ECS ? \ud83d\udd11  "},{"location":"Engine/#integration-of-property-into-the-ecs","text":"This is done in such a way that only systems can integrate new properties into the scene. This is to avoid parasitic properties (a property that is not affected and controlled by any system). The entire ECS is focused on the stage. The scene is a class that contains the list of integers that are currently being used. It stores the list of systems that are running. It allows you to create entities and link components to them. It contains the component table.","title":"  Integration of property into the ECS. \ud83d\udcdc  "},{"location":"FAQ/","text":"What is the difference between TCP and UDP? When clients establish a connection with each other, they follow a common protocol when doing so to ensure that all clients can communicate with each other. This is handled at the Transport layer in the OSI model. The OSI model stands for Open Systems Interconnection and is a model used by software developers and hardware manufacturers to create a standardized set of guidelines so these different technologies can inter operate with each other. a UDP(User Datagram Protocol) UDP stands for User Datagram Protocol and is one of the types of Internet Protocols your client would use to form a connection with another client or server you are trying to connect to. UDP is what is known as a \u201cconnection-less\u201d oriented protocol. This means that it doesn\u2019t establish a session with the server or client you are connecting to meaning data delivery is not guaranteed. For example, when a website is sending data back to your client, it will send out all its data/packets to your client and does not care if any data/packets are lost along the way. This means that you might not be able to get all the data/packet required for a functionality or whatever event you are trying to do at the moment. This is typically not ideal for situations such as file transfers/downloading because you might not get all the packets from the download leading to an incomplete or corrupt file. Another example where its bad is when you are trying to load a website. If packets are lost during the response, your client won\u2019t be able to properly render the website to how it was intended to look or perhaps a functionality on the website will not work. However, there are instances where UDP is preferred, such as video chatting. If packets are lost during video chatting or streaming a video, you might get missing pixels in the video but the service is still usable despite packet loss as oppose to TCP, where the service would not work unless all packets are confirmed to have reached their destination. UDP is also faster than TCP since it doesn\u2019t have to check if all the packets were received at the other end. b TCP(Transmission Control Protocol) TCP stands for Transmission Control Protocol. Like UDP, it is the other type of Internet Protocol your client would use to form a connection with the other client or server you want to connect to. Unlike UDP, TCP is a \u201cconnection-oriented\u201d protocol meaning it establishes a session and makes sure it is good and reliable so you can send data correctly. A TCP connection makes sure all packets are received at the other end of the connection and will resend the packet if the packet gets lost along the way. This means that you are guaranteed to receive information you requested and in the correct order it is meant to be sent. This does mean it is slower than a UDP connection since it has to check if the packet its sending has been received by the other party but is very useful in a lot of the things we do on the internet. For example, if you are trying to view a website, you would want all the functionalities to be there as well as the information displayed in the correct order. Another example is when you are downloading a file, you would want to make sure you get the entire file and not just parts of a file that becomes unusable or corrupt. Both UDP and TCP have their advantages and disadvantages. It really depends on what is prioritized to choose the right Internet Protocol to use. Most websites in the current day use a combination of both depending on what services are being used and what needs to be delivered. What platforms are supported by R-type? The platforms the game can run on are Windows and Linux. Windows operating system is a computer program that manages all computer resources and provides services to applications that run on top of it. This operating system was developed by Microsoft and released in 1985 under the name Windows. Linux is a Unix-like, open source and community-developed operating system (OS) for computers, servers, mainframes, mobile devices and embedded devices. It is supported on almost every major computer platform, including x86, ARM and SPARC, making it one of the most widely supported operating systems. What is the language used to create the R-type product? The programming language used for the R-type product relationship is C++ . C++ is a programming language: it is therefore used to write computer applications. It is also one of the most used programming languages today. C++ is created from the C language, whose functionalities it extends: C++ allows in particular object-oriented programming (OOP). What motivated the creation of Projet R-type? Already the R-type Project is an academic project of the third year. We decided to work on this project because successful completion of it gives us 6 credits. Adding bonuses and additional features can allow us to go up to 2 more credits. In short, we designed this project for academic purposes and also to validate our year because the project is part of a road block. Is R-type a portable application? How can you contribute and improve R-type? Awesome! As an open source project, R-type thrives off of the innovation and the ambition of developers like you. The best way to start contributing to R-type is by using it and reporting any issues that you might experience. A good bug report with clear reproduction steps helps your fellow contributors fix bugs quickly and efficiently. You can also report issues you find in the online documentation. To contribute to the project you can write directly to one of the contributors. They will try to answer you and therefore provide you with a guide to continue improving. When will the next version be released? Currently we are at the first version of the project. The parts currently designed are, in other words, only part 0 and part 1 which consist respectively of the documentation, dependency management and the prototype of the game playable on the network. I have a great idea for R-type. How can I share it? If you have an idea or contribution to share regarding the project, do not hesitate to write to one of the project contributors. By going to the Contributor page you will see the contact details of the different people who worked on the project. Does R-type use an ECS (Entity Component System)? Yes, the game runs and works on an ECS which has several features. Our ECS contains properties such as the collider which allows you to manage collisions between different elements. In addition, it contains the transform property which allows you to manage the movement. It contains the position of the entities.","title":"FAQ"},{"location":"FAQ/#_1","text":"","title":""},{"location":"FAQ/#what-is-the-difference-between-tcp-and-udp","text":"When clients establish a connection with each other, they follow a common protocol when doing so to ensure that all clients can communicate with each other. This is handled at the Transport layer in the OSI model. The OSI model stands for Open Systems Interconnection and is a model used by software developers and hardware manufacturers to create a standardized set of guidelines so these different technologies can inter operate with each other. a UDP(User Datagram Protocol) UDP stands for User Datagram Protocol and is one of the types of Internet Protocols your client would use to form a connection with another client or server you are trying to connect to. UDP is what is known as a \u201cconnection-less\u201d oriented protocol. This means that it doesn\u2019t establish a session with the server or client you are connecting to meaning data delivery is not guaranteed. For example, when a website is sending data back to your client, it will send out all its data/packets to your client and does not care if any data/packets are lost along the way. This means that you might not be able to get all the data/packet required for a functionality or whatever event you are trying to do at the moment. This is typically not ideal for situations such as file transfers/downloading because you might not get all the packets from the download leading to an incomplete or corrupt file. Another example where its bad is when you are trying to load a website. If packets are lost during the response, your client won\u2019t be able to properly render the website to how it was intended to look or perhaps a functionality on the website will not work. However, there are instances where UDP is preferred, such as video chatting. If packets are lost during video chatting or streaming a video, you might get missing pixels in the video but the service is still usable despite packet loss as oppose to TCP, where the service would not work unless all packets are confirmed to have reached their destination. UDP is also faster than TCP since it doesn\u2019t have to check if all the packets were received at the other end. b TCP(Transmission Control Protocol) TCP stands for Transmission Control Protocol. Like UDP, it is the other type of Internet Protocol your client would use to form a connection with the other client or server you want to connect to. Unlike UDP, TCP is a \u201cconnection-oriented\u201d protocol meaning it establishes a session and makes sure it is good and reliable so you can send data correctly. A TCP connection makes sure all packets are received at the other end of the connection and will resend the packet if the packet gets lost along the way. This means that you are guaranteed to receive information you requested and in the correct order it is meant to be sent. This does mean it is slower than a UDP connection since it has to check if the packet its sending has been received by the other party but is very useful in a lot of the things we do on the internet. For example, if you are trying to view a website, you would want all the functionalities to be there as well as the information displayed in the correct order. Another example is when you are downloading a file, you would want to make sure you get the entire file and not just parts of a file that becomes unusable or corrupt. Both UDP and TCP have their advantages and disadvantages. It really depends on what is prioritized to choose the right Internet Protocol to use. Most websites in the current day use a combination of both depending on what services are being used and what needs to be delivered.","title":"  What is the difference between TCP and UDP?  "},{"location":"FAQ/#what-platforms-are-supported-by-r-type","text":"The platforms the game can run on are Windows and Linux. Windows operating system is a computer program that manages all computer resources and provides services to applications that run on top of it. This operating system was developed by Microsoft and released in 1985 under the name Windows. Linux is a Unix-like, open source and community-developed operating system (OS) for computers, servers, mainframes, mobile devices and embedded devices. It is supported on almost every major computer platform, including x86, ARM and SPARC, making it one of the most widely supported operating systems.","title":"  What platforms are supported by R-type?  "},{"location":"FAQ/#what-is-the-language-used-to-create-the-r-type-product","text":"The programming language used for the R-type product relationship is C++ . C++ is a programming language: it is therefore used to write computer applications. It is also one of the most used programming languages today. C++ is created from the C language, whose functionalities it extends: C++ allows in particular object-oriented programming (OOP).","title":"  What is the language used to create the R-type product?  "},{"location":"FAQ/#what-motivated-the-creation-of-projet-r-type","text":"Already the R-type Project is an academic project of the third year. We decided to work on this project because successful completion of it gives us 6 credits. Adding bonuses and additional features can allow us to go up to 2 more credits. In short, we designed this project for academic purposes and also to validate our year because the project is part of a road block.","title":"  What motivated the creation of Projet R-type?  "},{"location":"FAQ/#is-r-type-a-portable-application","text":"","title":"  Is R-type a portable application?  "},{"location":"FAQ/#how-can-you-contribute-and-improve-r-type","text":"Awesome! As an open source project, R-type thrives off of the innovation and the ambition of developers like you. The best way to start contributing to R-type is by using it and reporting any issues that you might experience. A good bug report with clear reproduction steps helps your fellow contributors fix bugs quickly and efficiently. You can also report issues you find in the online documentation. To contribute to the project you can write directly to one of the contributors. They will try to answer you and therefore provide you with a guide to continue improving.","title":"  How can you contribute and improve R-type?  "},{"location":"FAQ/#when-will-the-next-version-be-released","text":"Currently we are at the first version of the project. The parts currently designed are, in other words, only part 0 and part 1 which consist respectively of the documentation, dependency management and the prototype of the game playable on the network.","title":"  When will the next version be released?  "},{"location":"FAQ/#i-have-a-great-idea-for-r-type-how-can-i-share-it","text":"If you have an idea or contribution to share regarding the project, do not hesitate to write to one of the project contributors. By going to the Contributor page you will see the contact details of the different people who worked on the project.","title":"  I have a great idea for R-type. How can I share it?  "},{"location":"FAQ/#does-r-type-use-an-ecs-entity-component-system","text":"Yes, the game runs and works on an ECS which has several features. Our ECS contains properties such as the collider which allows you to manage collisions between different elements. In addition, it contains the transform property which allows you to manage the movement. It contains the position of the entities.","title":"  Does R-type use an ECS (Entity Component System)?  "},{"location":"Getting_start/","text":"Welcome to the video game R-TYPE \ud83c\udfae\ud83d\ude80 Welcome aboard R-Type, an adventure that takes you back in time while propelling you into the future of gaming. Inspired by the renowned classic, our game captures the very essence of R-Type but with a modern twist that makes it even more thrilling. Dive into an epic intergalactic world where formidable enemy spacecraft and extraterrestrial creatures will attempt to thwart your progress. However, this time, there's a crucial difference: the game is multiplayer. Join forces with friends or challenge players from around the globe to showcase your shooting and strategic skills. Introduction \ud83d\udcd6 R-Type is an iconic series of horizontal-scrolling shoot 'em up video games developed by Irem, debuting in 1987 on an arcade machine. It was inspired by Konami's Gradius series. R-Type introduced several innovations that have been adopted by numerous other games of the same genre. Notable examples include: GyRuss - which is a tube shooter game. Noiz2sa - which is a manic shooter game. After The War - which is a Run and Gun game. This is a link to a YouTube video showcasing the gameplay of the game: R-type-Game Project Goal \ud83c\udfaf In the case of our R-Type study project, we need to implement our own version of the famous game, but this time with an added feature. The game must be playable online for one to four players, all of whom must work together to defeat the Evil Bidos monster. The player's objective is to eliminate aliens, collect power-ups, defeat the boss, and progress to the next level in the game. Furthermore, the project aims to delve into the exploration of various themes, such as: Game Design encompasses the game interactions to make it fun and engaging for players. A well-structured and accessible architecture for ease of communication and code exchange. The adoption of good software product development practices. Project Organization \ud83d\udcca The R-Type project is elegantly divided into three distinct parts. Firstly, we have part 0, then part 1, and finally part 2. It should be noted that each part of the project has a timeframe within which certain features must be implemented. The completion duration for the first part is set at 4 weeks, while the timeline for the second part is estimated at 3 weeks. Part 0 is dedicated to the meticulous creation of the project documentation. This documentation must encompass a variety of vital information, including the project's purpose, requirements for dependency installation, and cross-platform compatibility management. Furthermore, the documentation would be incomplete without a detailed description of the project compilation procedures, licensing terms, a list of contributors, as well as information regarding protocols and the project's technical aspects. Regarding the management of Part 1, it entails the development of a software architecture for the network game engine, as well as the creation of a functional game prototype. Part 2 goes beyond the game prototype. The objective of this Part 2 is to enhance various aspects of the product. Among the list of features to be improved, we have: -> Software architecture Advanced -> Advanced Server/Networking -> Advanced Gameplay/Game Design In the case of the software architecture choice, the aim is to continue designing the game engine and have a modular game engine. However, when opting for in-depth network management, features such as data transmission efficiency and reliability, as well as the high-level networking engine architecture, need to be implemented. Finally, for the choice of enhancing gameplay and game design, the gaming experience should be improved and enriched. Additionally, features like implementing an AI that can play the game itself. Requirement \ud83d\udccc In order to ensure a favorable evaluation for the defense and to maximize the allocation of the six credits to the project, it is imperative to meet certain prerequisites. Among these conditions, we find: The development of a product, as opposed to the execution of a project . Compilation management with CMake . Management of third-party dependencies . Cross-Platform Management: The project must be able to compile on both Linux and Windows . Version control flow management, which includes having proper Git practices and automated Continuous Integration (CI) . Dependency packagings . Technology used \ud83d\udd79\ufe0f R-type is a product that we chose to develop using Raylib and the C++ programming language. As a reminder, Raylib is a simple and easy-to-use library/library for programming video games. It supports multiple platforms such as Windows, Linux, MacOs and Android. In addition, it can be used with several programming languages such as C/C++, Python, and Rust. It contains several modules which have distinct functionalities. We can cite in this case: The Raudio module which manages the loading of audio files and streams (including wav, modules), as well as the management of audio hardware. The Core module which manages inputs, as well as the creation of windows and the OpenGL context. The Raymath module manages mathematical functions and vector, matrix, quaternion models, etc. The Shapes module manages 2D shapes and polygons as well as collision detection. The Textures module manages the loading and manipulation of textures, by the CPU or the GPU. The Text module manages everything that is text, from managing fonts to processing character strings. Here is an illustration of different awards that the bookstore has won due to its ease of access. Rappel \ud83d\udd14 It's important to note that the game, in its original version, underwent several enhanced iterations over time. First, there was the initial version of the game, which appeared in 1987, followed by R-Type II in 1989. Additionally, there were the releases of Super R-Type, R-Type Leo, and R-Type III (The Third Lightning) in 1991, 1992, and 1994, respectively. As a reminder, a Shoot'em up is a video game genre derived from action games in which the player controls a vehicle or character to destroy a large number of enemies using projectiles while dodging enemy projectiles to stay alive. Here is an illustration of the game's gameplay NetWork \ud83c\udf10\ud83d\udc65\ud83d\udcbb A network is a group of things or people connected to each other for the purpose of communicating, sharing information, or working together towards a common goal. This can be computers connected to the internet, friends who know each other, or even interconnected roads to facilitate the movement of vehicles. In general, a network allows various elements to stay in touch and collaborate in some way. In the case of our R-Type game, the network serves as a communication channel among different players. Additionally, in the R-Type context, we have a server that implements the entire game logic and, in addition to being multithreaded, notifies each client when a monster appears or makes a move. Usage \ud83e\udde4 For a good use of our R-type product you must have Conan and Cmake installed on your machine. We do not pass anything as a binary parameter. The binary is independent of the inputs. Once the game is launched, this is where we specify the IP address, the port, the nickname as the player. With this data entered on the keyboard, the game can begin. As a reminder, our product was developed using the Raylib library which is a cross-platform open source zlib/libpng license, published by Ramon Santamaria from 2013, and oriented towards the development of interactive applications, such as games.","title":"Getting Started"},{"location":"Getting_start/#welcome-to-the-video-game-r-type","text":"Welcome aboard R-Type, an adventure that takes you back in time while propelling you into the future of gaming. Inspired by the renowned classic, our game captures the very essence of R-Type but with a modern twist that makes it even more thrilling. Dive into an epic intergalactic world where formidable enemy spacecraft and extraterrestrial creatures will attempt to thwart your progress. However, this time, there's a crucial difference: the game is multiplayer. Join forces with friends or challenge players from around the globe to showcase your shooting and strategic skills.","title":"  Welcome to the video game R-TYPE   \ud83c\udfae\ud83d\ude80"},{"location":"Getting_start/#introduction","text":"R-Type is an iconic series of horizontal-scrolling shoot 'em up video games developed by Irem, debuting in 1987 on an arcade machine. It was inspired by Konami's Gradius series. R-Type introduced several innovations that have been adopted by numerous other games of the same genre. Notable examples include: GyRuss - which is a tube shooter game. Noiz2sa - which is a manic shooter game. After The War - which is a Run and Gun game. This is a link to a YouTube video showcasing the gameplay of the game: R-type-Game","title":"   Introduction \ud83d\udcd6  "},{"location":"Getting_start/#project-goal","text":"In the case of our R-Type study project, we need to implement our own version of the famous game, but this time with an added feature. The game must be playable online for one to four players, all of whom must work together to defeat the Evil Bidos monster. The player's objective is to eliminate aliens, collect power-ups, defeat the boss, and progress to the next level in the game. Furthermore, the project aims to delve into the exploration of various themes, such as: Game Design encompasses the game interactions to make it fun and engaging for players. A well-structured and accessible architecture for ease of communication and code exchange. The adoption of good software product development practices.","title":"  Project Goal   \ud83c\udfaf"},{"location":"Getting_start/#project-organization","text":"The R-Type project is elegantly divided into three distinct parts. Firstly, we have part 0, then part 1, and finally part 2. It should be noted that each part of the project has a timeframe within which certain features must be implemented. The completion duration for the first part is set at 4 weeks, while the timeline for the second part is estimated at 3 weeks. Part 0 is dedicated to the meticulous creation of the project documentation. This documentation must encompass a variety of vital information, including the project's purpose, requirements for dependency installation, and cross-platform compatibility management. Furthermore, the documentation would be incomplete without a detailed description of the project compilation procedures, licensing terms, a list of contributors, as well as information regarding protocols and the project's technical aspects. Regarding the management of Part 1, it entails the development of a software architecture for the network game engine, as well as the creation of a functional game prototype. Part 2 goes beyond the game prototype. The objective of this Part 2 is to enhance various aspects of the product. Among the list of features to be improved, we have: -> Software architecture Advanced -> Advanced Server/Networking -> Advanced Gameplay/Game Design In the case of the software architecture choice, the aim is to continue designing the game engine and have a modular game engine. However, when opting for in-depth network management, features such as data transmission efficiency and reliability, as well as the high-level networking engine architecture, need to be implemented. Finally, for the choice of enhancing gameplay and game design, the gaming experience should be improved and enriched. Additionally, features like implementing an AI that can play the game itself.","title":"  Project Organization \ud83d\udcca  "},{"location":"Getting_start/#requirement","text":"In order to ensure a favorable evaluation for the defense and to maximize the allocation of the six credits to the project, it is imperative to meet certain prerequisites. Among these conditions, we find: The development of a product, as opposed to the execution of a project . Compilation management with CMake . Management of third-party dependencies . Cross-Platform Management: The project must be able to compile on both Linux and Windows . Version control flow management, which includes having proper Git practices and automated Continuous Integration (CI) . Dependency packagings .","title":"  Requirement \ud83d\udccc  "},{"location":"Getting_start/#technology-used","text":"R-type is a product that we chose to develop using Raylib and the C++ programming language. As a reminder, Raylib is a simple and easy-to-use library/library for programming video games. It supports multiple platforms such as Windows, Linux, MacOs and Android. In addition, it can be used with several programming languages such as C/C++, Python, and Rust. It contains several modules which have distinct functionalities. We can cite in this case: The Raudio module which manages the loading of audio files and streams (including wav, modules), as well as the management of audio hardware. The Core module which manages inputs, as well as the creation of windows and the OpenGL context. The Raymath module manages mathematical functions and vector, matrix, quaternion models, etc. The Shapes module manages 2D shapes and polygons as well as collision detection. The Textures module manages the loading and manipulation of textures, by the CPU or the GPU. The Text module manages everything that is text, from managing fonts to processing character strings. Here is an illustration of different awards that the bookstore has won due to its ease of access.","title":"  Technology used \ud83d\udd79\ufe0f  "},{"location":"Getting_start/#rappel","text":"It's important to note that the game, in its original version, underwent several enhanced iterations over time. First, there was the initial version of the game, which appeared in 1987, followed by R-Type II in 1989. Additionally, there were the releases of Super R-Type, R-Type Leo, and R-Type III (The Third Lightning) in 1991, 1992, and 1994, respectively. As a reminder, a Shoot'em up is a video game genre derived from action games in which the player controls a vehicle or character to destroy a large number of enemies using projectiles while dodging enemy projectiles to stay alive. Here is an illustration of the game's gameplay","title":"  Rappel \ud83d\udd14  "},{"location":"Getting_start/#network","text":"A network is a group of things or people connected to each other for the purpose of communicating, sharing information, or working together towards a common goal. This can be computers connected to the internet, friends who know each other, or even interconnected roads to facilitate the movement of vehicles. In general, a network allows various elements to stay in touch and collaborate in some way. In the case of our R-Type game, the network serves as a communication channel among different players. Additionally, in the R-Type context, we have a server that implements the entire game logic and, in addition to being multithreaded, notifies each client when a monster appears or makes a move.","title":"  NetWork \ud83c\udf10\ud83d\udc65\ud83d\udcbb  "},{"location":"Getting_start/#usage","text":"For a good use of our R-type product you must have Conan and Cmake installed on your machine. We do not pass anything as a binary parameter. The binary is independent of the inputs. Once the game is launched, this is where we specify the IP address, the port, the nickname as the player. With this data entered on the keyboard, the game can begin. As a reminder, our product was developed using the Raylib library which is a cross-platform open source zlib/libpng license, published by Ramon Santamaria from 2013, and oriented towards the development of interactive applications, such as games.","title":"  Usage \ud83e\udde4  "},{"location":"Installation/","text":"Prerequisites \ud83d\udd16\u2712\ufe0f For a smooth running of the gameplay of the game and in order to avoid having technical problems, certain prerequisites are mandatory and essential. You need to install Visual Studio . You need to install the Visual Studio build tools. You need to install C++ and Cmake dependencies in Visual Studio . You need to install Conan which is a C++ package manager. Installation instructions \u2699\ufe0f\ud83d\udd27 Once you have the prerequisites, there are a set of steps to follow for a good installation. Among the different steps to follow we find: I- INSTALL VISUAL STUDIO. To install Visual Studio, you can follow these steps: Visit the official Visual Studio website: vscode On the website, you'll see different versions of Visual Studio available. Choose the edition that suits your needs (e.g., Visual Studio Community, Visual Studio Professional, or Visual Studio Enterprise) and click on the \"Download\" button for that edition. Once you click on the \"Download\" button, the Visual Studio installer will start downloading. Once the installer is downloaded, run it by double-clicking on the downloaded file. The installer will launch, and you'll be presented with different installation options and workloads. Workloads are sets of tools and features tailored for specific types of development, such as .NET desktop development, web development, or game development. Select the workloads you need for your development projects. You can also choose individual components if you prefer a more customized installation. After selecting the workloads and components, click on the \"Install\" button to start the installation process. You may need to accept the license terms and choose the installation location during this process. The installer will begin downloading and installing the selected components. This process may take some time, depending on your internet connection speed and the selected components. Once the installation is complete, you can launch Visual Studio from the Start menu or desktop shortcut. When you first launch Visual Studio, you may be prompted to sign in with your Microsoft account or create a new account. Signing in allows you to personalize your Visual Studio experience and access additional features. After signing in, you should be ready to start using Visual Studio for your development projects. Remember to check the system requirements for the specific version of Visual Studio you are installing to ensure compatibility with your operating system. II- INSTALL BUILDTOOLS OF VISUAL STUDIO. If you already have Visual Studio Code installed and you just want to install the Build Tools for Visual Studio, you can follow these steps: Go to the Visual Studio downloads page: https://visualstudio.microsoft.com/downloads/. Scroll down to the \"All downloads\" section. Look for the \"Tools for Visual Studio\" category and click on it. In the \"Tools for Visual Studio\" section, you will find different options. Look for the \"Build Tools for Visual Studio\" option and click the \"Download\" button. The Visual Studio Build Tools installer will start downloading. Once the installer is downloaded, run it by double-clicking on the downloaded file. The installer will launch and present you with various installation options. Make sure the \"Workloads\" tab is selected. In the list of workloads, you will find different options for specific types of development. Select the workloads you need for your projects. For example, you might choose \".NET desktop build tools\" or \"Web development build tools.\" You can also choose individual components if you prefer a more customized installation. After selecting the workloads and components, click the \"Install\" button to start the installation process. You may need to accept the license terms during this process. The installer will begin downloading and installing the selected components. This process may take some time, depending on your internet connection speed and the selected components. Once the installation is complete, you can use the Build Tools for Visual Studio from the command line or integrate them into your preferred development environment. It's important to note that the Build Tools for Visual Studio provide command-line tools and compilers without the Visual Studio IDE. They are designed for scenarios where you only need the build-related tools and not the full development environment. III- INSTALL C++ DEPENDENCIES AND CMAKE in VISUAL STUDIO . To install C++ dependencies and CMake in Visual Studio, you can follow these steps: Open Visual Studio and go to the \"Extensions\" menu. Select \"Manage Extensions\" from the dropdown menu. This will open the Extensions and Updates window. In the search bar of the Extensions and Updates window, type \"C++\" and press Enter. Look for the \"C++ Desktop Development\" extension and click on the \"Download\" button next to it. Wait for the extension to be downloaded and installed. You may need to restart Visual Studio after the installation is complete. Once Visual Studio restarts, go to the \"File\" menu and select \"New\" and then \"Project\". This will open the New Project window. In the New Project window, expand the \"Installed\" templates on the left-hand side and select \"Visual C++\". Choose a project template that suits your needs, such as \"Console Application\" or \"Windows Desktop Application\". Select the template and click \"Next\". Configure the project settings as desired, and click on the \"Create\" button to create the project. Once the project is created, you can start adding C++ code files to it. To use CMake in Visual Studio, you can either create a new project with CMake support or add CMake support to an existing project. To create a new project with CMake support: a . Go to the \"File\" menu and select \"New\" and then \"Project\". b . In the New Project window, expand the \"Installed\" templates on the left-hand side and select \"C++\". c . Select the \"CMake Project\" template and click \"Next\". Configure the project settings and click on the \"Create\" button to create the project. To add CMake support to an existing project: a . Right-click on the project in the Solution Explorer and select \"Add\" and then \"New Item\". b .In the Add New Item window, search for \"CMake\" in the search bar. c .Select the \"CMake Settings\" item and click \"Add\". Once you have a project with CMake support, you can configure your CMakeLists.txt file to specify the dependencies and build settings for your project. Open the CMakeLists.txt file in your project. Use the CMake commands and syntax to configure your project's dependencies, include directories, libraries, and build options. Build your project by selecting \"Build\" from the Visual Studio menu or pressing Ctrl+Shift+B. That's it! You have now installed C++ dependencies and CMake in Visual Studio, and you can start developing C++ projects using these tools. Please note that the specific steps may vary slightly depending on the version of Visual Studio you are using. IV- INSATALL CONAN. To install Conan, a package manager for C++ dependencies, you can follow these steps: Open a command prompt or terminal window. Make sure you have Python installed on your system. You can check if Python is installed by running the following command: python --version If Python is not installed, visit the Python website Python and download the latest version of Python for your operating system. Follow the installation instructions provided. Once Python is installed, you can install Conan using pip, the package installer for Python. Run the following command: pip install conan This command will download and install Conan and its dependencies. After the installation is complete, you can verify that Conan is installed correctly by running the following command: conan --version This command will display the version of Conan installed on your system. Conan is now installed and ready to use. You can start using Conan to manage C++ dependencies for your projects. To learn more about how to use Conan, you can refer to the Conan documentation Conan . That's it! You have successfully installed Conan on your system. You can now use Conan to manage your C++ dependencies for your projects. Example of usage \ud83e\udeac clone the project git clone git@github.com:EpitechPromo2026/B-CPP-500-COT-5-1-rtype-jean-david.bamenou.git launch cmake cmake -S . -B ./build/ then make cd build/ make and the project is finally ready to launch Usage \ud83d\udccb Make sure you have cmake installed STEP1: Compile on Linux pip install conan conan profile detect --force conan install . --output-folder=build --build=missing cd build cmake -DCMAKE_BUILD_TYPE=Release .. make root of the project run the binaries STEP2: Compile on Windows install Visual studio install buildtools of visual studio install C++ dependencies and cmake in visual studio install conan conan profile detect --force conan install . --output-folder=build --build=missing cd build cmake -DCMAKE_TOOLCHAIN_FILE=. .. cmake --build . --config Release root of the project run the binaries these are the binaries: r-type_server.exe and r-type_client.exe Now, the clients could connect to the server Enjoy the gameplay, and tell your friends to join you ! \ud83c\udf89","title":"Installation"},{"location":"Installation/#_1","text":"","title":""},{"location":"Installation/#prerequisites","text":"For a smooth running of the gameplay of the game and in order to avoid having technical problems, certain prerequisites are mandatory and essential. You need to install Visual Studio . You need to install the Visual Studio build tools. You need to install C++ and Cmake dependencies in Visual Studio . You need to install Conan which is a C++ package manager.","title":"  Prerequisites \ud83d\udd16\u2712\ufe0f  "},{"location":"Installation/#installation-instructions","text":"Once you have the prerequisites, there are a set of steps to follow for a good installation. Among the different steps to follow we find: I- INSTALL VISUAL STUDIO. To install Visual Studio, you can follow these steps: Visit the official Visual Studio website: vscode On the website, you'll see different versions of Visual Studio available. Choose the edition that suits your needs (e.g., Visual Studio Community, Visual Studio Professional, or Visual Studio Enterprise) and click on the \"Download\" button for that edition. Once you click on the \"Download\" button, the Visual Studio installer will start downloading. Once the installer is downloaded, run it by double-clicking on the downloaded file. The installer will launch, and you'll be presented with different installation options and workloads. Workloads are sets of tools and features tailored for specific types of development, such as .NET desktop development, web development, or game development. Select the workloads you need for your development projects. You can also choose individual components if you prefer a more customized installation. After selecting the workloads and components, click on the \"Install\" button to start the installation process. You may need to accept the license terms and choose the installation location during this process. The installer will begin downloading and installing the selected components. This process may take some time, depending on your internet connection speed and the selected components. Once the installation is complete, you can launch Visual Studio from the Start menu or desktop shortcut. When you first launch Visual Studio, you may be prompted to sign in with your Microsoft account or create a new account. Signing in allows you to personalize your Visual Studio experience and access additional features. After signing in, you should be ready to start using Visual Studio for your development projects. Remember to check the system requirements for the specific version of Visual Studio you are installing to ensure compatibility with your operating system. II- INSTALL BUILDTOOLS OF VISUAL STUDIO. If you already have Visual Studio Code installed and you just want to install the Build Tools for Visual Studio, you can follow these steps: Go to the Visual Studio downloads page: https://visualstudio.microsoft.com/downloads/. Scroll down to the \"All downloads\" section. Look for the \"Tools for Visual Studio\" category and click on it. In the \"Tools for Visual Studio\" section, you will find different options. Look for the \"Build Tools for Visual Studio\" option and click the \"Download\" button. The Visual Studio Build Tools installer will start downloading. Once the installer is downloaded, run it by double-clicking on the downloaded file. The installer will launch and present you with various installation options. Make sure the \"Workloads\" tab is selected. In the list of workloads, you will find different options for specific types of development. Select the workloads you need for your projects. For example, you might choose \".NET desktop build tools\" or \"Web development build tools.\" You can also choose individual components if you prefer a more customized installation. After selecting the workloads and components, click the \"Install\" button to start the installation process. You may need to accept the license terms during this process. The installer will begin downloading and installing the selected components. This process may take some time, depending on your internet connection speed and the selected components. Once the installation is complete, you can use the Build Tools for Visual Studio from the command line or integrate them into your preferred development environment. It's important to note that the Build Tools for Visual Studio provide command-line tools and compilers without the Visual Studio IDE. They are designed for scenarios where you only need the build-related tools and not the full development environment. III- INSTALL C++ DEPENDENCIES AND CMAKE in VISUAL STUDIO . To install C++ dependencies and CMake in Visual Studio, you can follow these steps: Open Visual Studio and go to the \"Extensions\" menu. Select \"Manage Extensions\" from the dropdown menu. This will open the Extensions and Updates window. In the search bar of the Extensions and Updates window, type \"C++\" and press Enter. Look for the \"C++ Desktop Development\" extension and click on the \"Download\" button next to it. Wait for the extension to be downloaded and installed. You may need to restart Visual Studio after the installation is complete. Once Visual Studio restarts, go to the \"File\" menu and select \"New\" and then \"Project\". This will open the New Project window. In the New Project window, expand the \"Installed\" templates on the left-hand side and select \"Visual C++\". Choose a project template that suits your needs, such as \"Console Application\" or \"Windows Desktop Application\". Select the template and click \"Next\". Configure the project settings as desired, and click on the \"Create\" button to create the project. Once the project is created, you can start adding C++ code files to it. To use CMake in Visual Studio, you can either create a new project with CMake support or add CMake support to an existing project. To create a new project with CMake support: a . Go to the \"File\" menu and select \"New\" and then \"Project\". b . In the New Project window, expand the \"Installed\" templates on the left-hand side and select \"C++\". c . Select the \"CMake Project\" template and click \"Next\". Configure the project settings and click on the \"Create\" button to create the project. To add CMake support to an existing project: a . Right-click on the project in the Solution Explorer and select \"Add\" and then \"New Item\". b .In the Add New Item window, search for \"CMake\" in the search bar. c .Select the \"CMake Settings\" item and click \"Add\". Once you have a project with CMake support, you can configure your CMakeLists.txt file to specify the dependencies and build settings for your project. Open the CMakeLists.txt file in your project. Use the CMake commands and syntax to configure your project's dependencies, include directories, libraries, and build options. Build your project by selecting \"Build\" from the Visual Studio menu or pressing Ctrl+Shift+B. That's it! You have now installed C++ dependencies and CMake in Visual Studio, and you can start developing C++ projects using these tools. Please note that the specific steps may vary slightly depending on the version of Visual Studio you are using. IV- INSATALL CONAN. To install Conan, a package manager for C++ dependencies, you can follow these steps: Open a command prompt or terminal window. Make sure you have Python installed on your system. You can check if Python is installed by running the following command: python --version If Python is not installed, visit the Python website Python and download the latest version of Python for your operating system. Follow the installation instructions provided. Once Python is installed, you can install Conan using pip, the package installer for Python. Run the following command: pip install conan This command will download and install Conan and its dependencies. After the installation is complete, you can verify that Conan is installed correctly by running the following command: conan --version This command will display the version of Conan installed on your system. Conan is now installed and ready to use. You can start using Conan to manage C++ dependencies for your projects. To learn more about how to use Conan, you can refer to the Conan documentation Conan . That's it! You have successfully installed Conan on your system. You can now use Conan to manage your C++ dependencies for your projects.","title":"  Installation instructions \u2699\ufe0f\ud83d\udd27   "},{"location":"Installation/#example-of-usage","text":"clone the project git clone git@github.com:EpitechPromo2026/B-CPP-500-COT-5-1-rtype-jean-david.bamenou.git launch cmake cmake -S . -B ./build/ then make cd build/ make and the project is finally ready to launch","title":"  Example of usage \ud83e\udeac  "},{"location":"Installation/#usage","text":"Make sure you have cmake installed STEP1: Compile on Linux pip install conan conan profile detect --force conan install . --output-folder=build --build=missing cd build cmake -DCMAKE_BUILD_TYPE=Release .. make root of the project run the binaries STEP2: Compile on Windows install Visual studio install buildtools of visual studio install C++ dependencies and cmake in visual studio install conan conan profile detect --force conan install . --output-folder=build --build=missing cd build cmake -DCMAKE_TOOLCHAIN_FILE=. .. cmake --build . --config Release root of the project run the binaries these are the binaries: r-type_server.exe and r-type_client.exe Now, the clients could connect to the server Enjoy the gameplay, and tell your friends to join you ! \ud83c\udf89","title":"  Usage \ud83d\udccb  "},{"location":"License/","text":"Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright [yyyy] [name of copyright owner] Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"RFC/","text":"RFC DOCUMENTATION \ud83c\udf10\ud83d\udce1. This document specifies the RType communications protocol, designed to facilitate an immersive and interactive multiplayer gaming experience. The protocol guarantees efficient communication between the server and clients, allowing real-time management of the actions of players and game entities. Introduction The RType communications protocol is specifically designed to facilitate an immersive and interactive multiplayer gaming experience. It guarantees efficient communication between the server and clients, allowing real-time management of the actions of players and game entities. Context R-Type game is a popular multiplayer game that requires smooth communication between the server and clients. To ensure a smooth gaming experience, a robust communication protocol is essential. Objectives The main objectives of the RType communication protocol are: -Establish a secure and reliable connection between server and clients. -Enable two-way communication for transmitting player actions and game entity updates. -Keep the game in sync between different clients by regularly pushing out status updates. Architecture The R-Type game is based on a client-server architecture. The server is responsible for managing client connections, game logic, and communication with the GHEngine game engine. The GHEngine game engine handles game entity management and game physics. System components a Server The server manages client connections, game logic, and communication with the GHEngine game engine. He plays an essential role in the proper functioning of the game and in communicating with customers. b Client The client interacts with the server, displays game data and transmits player actions. It allows active participation of players in the game. Technologies used The R-Type communication protocol uses User Datagram Protocol (UDP) to facilitate fast and efficient communication between the server and clients. The Asio library is used to manage network communication asynchronously, ensuring optimal performance and efficient connection management. a Code structure The server-side code structure for R-Type is organized in the following directories: - \"GHEngine\" directory: Contains files describing game entities, rules and properties. - \u201cPublics\u201d directory: Includes environment configuration files, management errors and public definitions used in the game. - \"Server\" directory: Includes the main server files and the central logic of the game. b Communication protocol The RType communication protocol supports various commands and actions for ensure effective communication between server and clients. Connection a Establishing the connection To join the game, the client sends a \u201cJOIN\u201d command to the server. The server responds with a welcome message, confirming the successful connection of the client. b Maintaining the connection The protocol includes connection maintenance mechanisms to ensure stable communication between the server and clients, providing a smooth gaming experience. Player actions The protocol supports the following player actions: a Creation of entities Customers can create a new entity in the game by sending a \"NEW\" command, providing details such as entity ID, type and position. b Movement of entities Clients can indicate specific movements in the game by sending a \"MOV\" command, including details such as direction and speed of movement. c Entity management The protocol facilitates the effective management of game entities using the following commands: d Information about entities The server sends detailed information about a specific entity to clients via the \"INFO\" command, including the identifier, type, position and current state of the entity. e Status updates To guarantee synchronization of the game state between different clients, the server periodically sends \"STATUS\" commands, providing essential information about entity properties such as position, speed, and health.","title":"RFC"},{"location":"RFC/#rfc-documentation","text":"This document specifies the RType communications protocol, designed to facilitate an immersive and interactive multiplayer gaming experience. The protocol guarantees efficient communication between the server and clients, allowing real-time management of the actions of players and game entities.","title":"  RFC DOCUMENTATION \ud83c\udf10\ud83d\udce1.  "},{"location":"RFC/#introduction","text":"The RType communications protocol is specifically designed to facilitate an immersive and interactive multiplayer gaming experience. It guarantees efficient communication between the server and clients, allowing real-time management of the actions of players and game entities.","title":"  Introduction  "},{"location":"RFC/#context","text":"R-Type game is a popular multiplayer game that requires smooth communication between the server and clients. To ensure a smooth gaming experience, a robust communication protocol is essential.","title":"  Context  "},{"location":"RFC/#objectives","text":"The main objectives of the RType communication protocol are: -Establish a secure and reliable connection between server and clients. -Enable two-way communication for transmitting player actions and game entity updates. -Keep the game in sync between different clients by regularly pushing out status updates.","title":"  Objectives  "},{"location":"RFC/#architecture","text":"The R-Type game is based on a client-server architecture. The server is responsible for managing client connections, game logic, and communication with the GHEngine game engine. The GHEngine game engine handles game entity management and game physics.","title":"  Architecture  "},{"location":"RFC/#system-components","text":"a Server The server manages client connections, game logic, and communication with the GHEngine game engine. He plays an essential role in the proper functioning of the game and in communicating with customers. b Client The client interacts with the server, displays game data and transmits player actions. It allows active participation of players in the game.","title":"  System components  "},{"location":"RFC/#technologies-used","text":"The R-Type communication protocol uses User Datagram Protocol (UDP) to facilitate fast and efficient communication between the server and clients. The Asio library is used to manage network communication asynchronously, ensuring optimal performance and efficient connection management. a Code structure The server-side code structure for R-Type is organized in the following directories: - \"GHEngine\" directory: Contains files describing game entities, rules and properties. - \u201cPublics\u201d directory: Includes environment configuration files, management errors and public definitions used in the game. - \"Server\" directory: Includes the main server files and the central logic of the game. b Communication protocol The RType communication protocol supports various commands and actions for ensure effective communication between server and clients.","title":"  Technologies used  "},{"location":"RFC/#connection","text":"a Establishing the connection To join the game, the client sends a \u201cJOIN\u201d command to the server. The server responds with a welcome message, confirming the successful connection of the client. b Maintaining the connection The protocol includes connection maintenance mechanisms to ensure stable communication between the server and clients, providing a smooth gaming experience.","title":"  Connection  "},{"location":"RFC/#player-actions","text":"The protocol supports the following player actions: a Creation of entities Customers can create a new entity in the game by sending a \"NEW\" command, providing details such as entity ID, type and position. b Movement of entities Clients can indicate specific movements in the game by sending a \"MOV\" command, including details such as direction and speed of movement. c Entity management The protocol facilitates the effective management of game entities using the following commands: d Information about entities The server sends detailed information about a specific entity to clients via the \"INFO\" command, including the identifier, type, position and current state of the entity. e Status updates To guarantee synchronization of the game state between different clients, the server periodically sends \"STATUS\" commands, providing essential information about entity properties such as position, speed, and health.","title":"  Player actions  "},{"location":"TechnicalDoc/","text":"We all know that the R-type product has a server and a client implemented in C++. But each of the two has essential criteria. About the Server. \ud83c\udf10 As for the server, it implements all the logic of the game. Additionally the server must: notify each client when a monster appears, moves, is destroyed, shoots, kills a player, and so on..., as well as the actions of other clients (a player moves, shoots, etc.) be multithreaded, or at least MUST NOT block or wait for messages from clients, because the game must run frame by frame on the server. manage game logic such that the game should run frame by frame on the server, regardless of client actions! manage the handling of clients that go down (that have trouble communicating with the server). For whatever reason, the server MUST continue to run and MUST inform other clients in the same game that a client is failing. is planted. must be robust and capable of performing whatever problem may arise. How did we design our Server ? \ud83d\udca1 What are the elements that characterize our server ? \ud83d\udcd1 What does our server need to function ? \ud83e\uddf0 Server integration with ECS.\ud83e\udde9 About the Client \ud83e\udd1d\ud83c\udf10 . The client represents the graphical display of the game. Indeed, the client does not implement the game logic. The server already assumes this responsibility. The client CAN nevertheless execute parts of the game's logic code, such as the movements of the local player or missile movements, but in all cases the server MUST have authority over what ultimately happens. The customer also has certain essential rules. The client must contain everything necessary to display the game. At the customer level we must be able to observe elements such as: -the player -monsters -monsters that fire missiles. -missiles from monsters and the player. -a background against which the confrontation takes place. -obstacles to avoid","title":"TechnicalDocumentation"},{"location":"TechnicalDoc/#_1","text":"We all know that the R-type product has a server and a client implemented in C++. But each of the two has essential criteria.","title":""},{"location":"TechnicalDoc/#about-the-server","text":"As for the server, it implements all the logic of the game. Additionally the server must: notify each client when a monster appears, moves, is destroyed, shoots, kills a player, and so on..., as well as the actions of other clients (a player moves, shoots, etc.) be multithreaded, or at least MUST NOT block or wait for messages from clients, because the game must run frame by frame on the server. manage game logic such that the game should run frame by frame on the server, regardless of client actions! manage the handling of clients that go down (that have trouble communicating with the server). For whatever reason, the server MUST continue to run and MUST inform other clients in the same game that a client is failing. is planted. must be robust and capable of performing whatever problem may arise.","title":"  About the Server. \ud83c\udf10 "},{"location":"TechnicalDoc/#how-did-we-design-our-server","text":"","title":"  How did we design our Server ? \ud83d\udca1 "},{"location":"TechnicalDoc/#what-are-the-elements-that-characterize-our-server","text":"","title":"  What are the elements that characterize our server ? \ud83d\udcd1 "},{"location":"TechnicalDoc/#what-does-our-server-need-to-function","text":"","title":"  What does our server need to function ? \ud83e\uddf0  "},{"location":"TechnicalDoc/#server-integration-with-ecs","text":"","title":"  Server integration with ECS.\ud83e\udde9  "},{"location":"TechnicalDoc/#about-the-client","text":"The client represents the graphical display of the game. Indeed, the client does not implement the game logic. The server already assumes this responsibility. The client CAN nevertheless execute parts of the game's logic code, such as the movements of the local player or missile movements, but in all cases the server MUST have authority over what ultimately happens. The customer also has certain essential rules. The client must contain everything necessary to display the game. At the customer level we must be able to observe elements such as: -the player -monsters -monsters that fire missiles. -missiles from monsters and the player. -a background against which the confrontation takes place. -obstacles to avoid","title":"  About the Client \ud83e\udd1d\ud83c\udf10 . "}]}
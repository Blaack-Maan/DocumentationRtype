{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"Api/","text":"","title":"API Used"},{"location":"Api/#_1","text":"","title":""},{"location":"Architecture/","text":"Overall Project Architecture As mentioned above, the project is divided into three parts. We have: the Server part the Customer part Web rating the Customer part Mobile rating The Web/Mobile client is only responsible for displaying screens and transmitting user requests to the application server. Brief explanation of the diagrams below: First we have a Server which is linked to a database. This same Server contains the implementation of certain services such as (Gitlab, Github, etc.). When we take a service it contains a certain number of actions and reactions. The connection to a service is done from the server and then the token is retrieved. The client (Web/Mobile) makes route tracking requests in order to get a given response. The database contains different information about the customer (Web/Mobile). We have a Cron tasks which checks the actions on the database.","title":"Architecture"},{"location":"Architecture/#overall-project-architecture","text":"As mentioned above, the project is divided into three parts. We have: the Server part the Customer part Web rating the Customer part Mobile rating The Web/Mobile client is only responsible for displaying screens and transmitting user requests to the application server. Brief explanation of the diagrams below: First we have a Server which is linked to a database. This same Server contains the implementation of certain services such as (Gitlab, Github, etc.). When we take a service it contains a certain number of actions and reactions. The connection to a service is done from the server and then the token is retrieved. The client (Web/Mobile) makes route tracking requests in order to get a given response. The database contains different information about the customer (Web/Mobile). We have a Cron tasks which checks the actions on the database.","title":" Overall Project Architecture "},{"location":"Client/","text":"Pour voir la liste des services disponibles au niveau du projet veiller consulter la section Service/Action/Reactions. Comment les services sont integres du cote du Frontend Dans notre app l\u2019int\u00e9gration des services se faire essentiellement par les m\u00e9thodes POST et GET . En effet une fois la route vers le service disponible nous communiquons avec l\u2019api en envoyant des requ\u00eates POST pour envoyer des informations(un exemple, les informations de connexion des utilisateurs) et GET pour r\u00e9cup\u00e9rer des informations ( les actions et r\u00e9actions relatives \u00e0 un service par exemple). L\u2019exemple ci dessous met en lumi\u00e8re la communication avec l\u2019api \u00e0 travers la m\u00e9thode POST. const handleSubmit = async(event) => { event.preventDefault(); try { const url = \"https://inspired-strictly-starling.ngrok-free.app/api/v1/login\"; const response = await fetch(url, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(formData), }); console.log(formData) if (response.ok) { const data = response.json(); window.location.href='/userhome'; } else { const lol = response.json(); } } catch (error) { console.error(\"Erreur d'envoi des donn\u00e9es\", error); } } Nous r\u00e9cup\u00e9rons ainsi les informations d\u2019authentification de l\u2019utilisateur ayant un compte existant que nous transmettons \u00e0 l\u2019api AREA Creation Process Well before the user can create an AREA, they must authenticate, therefore register on the platform. Creating an AREA is done by following several steps. We can cite in this case: Choose area name create action see services that have actions list : (GET /api/v1/service/list) check if connected to service selected (GET /api/v1/service/status/:name) if connected display that user is connected else, ask user to connect if user try to connect to service, use : GET /api/v1/service/connect/:name that will send you a redirection link that user will use to connectto service after user end his connection, service send token that are stored on server session after connected user can choose action on this service (you can list actions with) (/api/v1/service/info/service_name) after ask information corresponding to informations return the server about actions Do same about reactions After everithing have chosend send this request: POST /api/v1/area/create: params : name: area name enter by user action: action name, params_name: value reactions: reaction name, reaction_name: value","title":"Client"},{"location":"Client/#_1","text":"Pour voir la liste des services disponibles au niveau du projet veiller consulter la section Service/Action/Reactions.","title":""},{"location":"Client/#comment-les-services-sont-integres-du-cote-du-frontend","text":"Dans notre app l\u2019int\u00e9gration des services se faire essentiellement par les m\u00e9thodes POST et GET . En effet une fois la route vers le service disponible nous communiquons avec l\u2019api en envoyant des requ\u00eates POST pour envoyer des informations(un exemple, les informations de connexion des utilisateurs) et GET pour r\u00e9cup\u00e9rer des informations ( les actions et r\u00e9actions relatives \u00e0 un service par exemple). L\u2019exemple ci dessous met en lumi\u00e8re la communication avec l\u2019api \u00e0 travers la m\u00e9thode POST. const handleSubmit = async(event) => { event.preventDefault(); try { const url = \"https://inspired-strictly-starling.ngrok-free.app/api/v1/login\"; const response = await fetch(url, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(formData), }); console.log(formData) if (response.ok) { const data = response.json(); window.location.href='/userhome'; } else { const lol = response.json(); } } catch (error) { console.error(\"Erreur d'envoi des donn\u00e9es\", error); } } Nous r\u00e9cup\u00e9rons ainsi les informations d\u2019authentification de l\u2019utilisateur ayant un compte existant que nous transmettons \u00e0 l\u2019api","title":"Comment les services sont integres du cote du Frontend"},{"location":"Client/#area-creation-process","text":"Well before the user can create an AREA, they must authenticate, therefore register on the platform. Creating an AREA is done by following several steps. We can cite in this case: Choose area name create action see services that have actions list : (GET /api/v1/service/list) check if connected to service selected (GET /api/v1/service/status/:name) if connected display that user is connected else, ask user to connect if user try to connect to service, use : GET /api/v1/service/connect/:name that will send you a redirection link that user will use to connectto service after user end his connection, service send token that are stored on server session after connected user can choose action on this service (you can list actions with) (/api/v1/service/info/service_name) after ask information corresponding to informations return the server about actions Do same about reactions After everithing have chosend send this request: POST /api/v1/area/create: params : name: area name enter by user action: action name, params_name: value reactions: reaction name, reaction_name: value","title":" AREA Creation Process "},{"location":"Contributor/","text":"\ud83e\udd1d CONTACTS \u260e\ufe0f\ud83d\udc64 \ud83d\udc64 Wilfrid BINAZON Github: [@]() Email: wilfrid.binazon@epitech.eu LinkedIn: Wilfrid BINAZON Instagram: [@]() T\u00e9l\u00e9phone: +229 54 32 77 70 \ud83d\udc64 Cirine FELIHO Github: [@]() Email: cirine.feliho@epitech.eu LinkedIn: Cirine FELIHO Instagram: []() T\u00e9l\u00e9phone: +22 94 76 53 08 \ud83d\udc64 Fitzgerald ADECHIAN Github: [@]() Email: fitzgerald.adechian@epitech.eu LinkedIn: Fitzgerald ADECHIAN Instagram: [@]() T\u00e9l\u00e9phone: +229 66 43 29 29 \ud83d\udc64 Hansly AGBAMATE Github: [@]() Email: hansly.agbamate@epitech.eu LinkedIn: Hansly AGBAMATE Instagram: [@]() T\u00e9l\u00e9phone: +229 61 02 65 65 \ud83d\udc64 Lucia CODJIA Github: [@]() Email: lucia.codjia@epitech.eu LinkedIn: Lucia CODJIA Instagram: [@]() T\u00e9l\u00e9phone: +229 54 80 06 86 \ud83d\udc64 Mouammar ADJAHO Github: [@]() Email: mouammar.adjaho@epitech.eu LinkedIn: Mouammar ADJAHO Instagram: [@]() T\u00e9l\u00e9phone: +229 99 11 10 21","title":"Contributor"},{"location":"Contributor/#_1","text":"","title":"\ud83e\udd1d"},{"location":"Contributor/#contacts","text":"\ud83d\udc64 Wilfrid BINAZON Github: [@]() Email: wilfrid.binazon@epitech.eu LinkedIn: Wilfrid BINAZON Instagram: [@]() T\u00e9l\u00e9phone: +229 54 32 77 70 \ud83d\udc64 Cirine FELIHO Github: [@]() Email: cirine.feliho@epitech.eu LinkedIn: Cirine FELIHO Instagram: []() T\u00e9l\u00e9phone: +22 94 76 53 08 \ud83d\udc64 Fitzgerald ADECHIAN Github: [@]() Email: fitzgerald.adechian@epitech.eu LinkedIn: Fitzgerald ADECHIAN Instagram: [@]() T\u00e9l\u00e9phone: +229 66 43 29 29 \ud83d\udc64 Hansly AGBAMATE Github: [@]() Email: hansly.agbamate@epitech.eu LinkedIn: Hansly AGBAMATE Instagram: [@]() T\u00e9l\u00e9phone: +229 61 02 65 65 \ud83d\udc64 Lucia CODJIA Github: [@]() Email: lucia.codjia@epitech.eu LinkedIn: Lucia CODJIA Instagram: [@]() T\u00e9l\u00e9phone: +229 54 80 06 86 \ud83d\udc64 Mouammar ADJAHO Github: [@]() Email: mouammar.adjaho@epitech.eu LinkedIn: Mouammar ADJAHO Instagram: [@]() T\u00e9l\u00e9phone: +229 99 11 10 21","title":"CONTACTS \u260e\ufe0f\ud83d\udc64"},{"location":"FAQ/","text":"","title":"FAQ"},{"location":"FAQ/#_1","text":"","title":""},{"location":"License/","text":"","title":"License"},{"location":"License/#_1","text":"","title":""},{"location":"Server/","text":"Les mandatory du Serveur Le corps du projet se trouve au sein du serveur. En effet le serveur contient des donnees tels que l'implementation des services, la logique metier de l'authentification, la connection a la base de donnees et bien dautres choses. Comment on run le Serveur Pour run le serveur il faut executer une serie de commande dans un ordre precis. On a : Comment l'authenfication a ete mise en place Il faut dabord creer des identifants du develppeur dans la console google cloud. Apres avoir recuperaton de l'dentifiant on creer un client google qui sabonne a l'API de google. On lance une requete de connexion a Google en envoyant une URL de redirection au frontend. Apres seste quthentifier l'API de google renvoie toutes les informations conecernant lutilsiateur(comme le username, le mot de passe, son profil, etc). export async function connectToGmail(req, res) { const auth = new google.auth.OAuth2(credential.web.client_id, credential.web.client_secret, credential.web.redirect_uris[1]); console.log(req.session); const scopes = ['https://www.googleapis.com/auth/gmail.readonly', 'https://www.googleapis.com/auth/gmail.modify']; const authurl = auth.generateAuthUrl({access_type: 'offline', scope: scopes}); res.status(200).json({url: authurl}); } Comme vous pouvez le voir ci dessous il: R\u00e9cup\u00e8re le code d'autorisation \u00e0 partir de la requ\u00eate req.query, utilise ce code pour obtenir un jeton d'authentification Gmail via auth.getToken(code) et stocke le jeton dans la base de donn\u00e9es. Renvoie une r\u00e9ponse HTTP avec un statut 200 et un message JSON indiquant que le jeton a \u00e9t\u00e9 re\u00e7u avec succ\u00e8s. export async function getTokenToGmail(req, res) { console.log(req.session); const auth = new google.auth.OAuth2(credential.web.client_id, credential.web.client_secret, credential.web.redirect_uris[1]); const {code} = req.query; const {tokens} = await auth.getToken(code); console.log(tokens); await putElemInBase(new ObjectId(req.session._id), {gmail: tokens}); res.status(200).json({message: \"token receive\"}); } Comment les services sont impletes du cote du Serveur","title":"Server"},{"location":"Server/#_1","text":"","title":""},{"location":"Server/#les-mandatory-du-serveur","text":"Le corps du projet se trouve au sein du serveur. En effet le serveur contient des donnees tels que l'implementation des services, la logique metier de l'authentification, la connection a la base de donnees et bien dautres choses.","title":"Les mandatory du Serveur"},{"location":"Server/#comment-on-run-le-serveur","text":"Pour run le serveur il faut executer une serie de commande dans un ordre precis. On a :","title":"Comment on run le Serveur"},{"location":"Server/#comment-lauthenfication-a-ete-mise-en-place","text":"Il faut dabord creer des identifants du develppeur dans la console google cloud. Apres avoir recuperaton de l'dentifiant on creer un client google qui sabonne a l'API de google. On lance une requete de connexion a Google en envoyant une URL de redirection au frontend. Apres seste quthentifier l'API de google renvoie toutes les informations conecernant lutilsiateur(comme le username, le mot de passe, son profil, etc). export async function connectToGmail(req, res) { const auth = new google.auth.OAuth2(credential.web.client_id, credential.web.client_secret, credential.web.redirect_uris[1]); console.log(req.session); const scopes = ['https://www.googleapis.com/auth/gmail.readonly', 'https://www.googleapis.com/auth/gmail.modify']; const authurl = auth.generateAuthUrl({access_type: 'offline', scope: scopes}); res.status(200).json({url: authurl}); } Comme vous pouvez le voir ci dessous il: R\u00e9cup\u00e8re le code d'autorisation \u00e0 partir de la requ\u00eate req.query, utilise ce code pour obtenir un jeton d'authentification Gmail via auth.getToken(code) et stocke le jeton dans la base de donn\u00e9es. Renvoie une r\u00e9ponse HTTP avec un statut 200 et un message JSON indiquant que le jeton a \u00e9t\u00e9 re\u00e7u avec succ\u00e8s. export async function getTokenToGmail(req, res) { console.log(req.session); const auth = new google.auth.OAuth2(credential.web.client_id, credential.web.client_secret, credential.web.redirect_uris[1]); const {code} = req.query; const {tokens} = await auth.getToken(code); console.log(tokens); await putElemInBase(new ObjectId(req.session._id), {gmail: tokens}); res.status(200).json({message: \"token receive\"}); }","title":"Comment l'authenfication a ete mise en place"},{"location":"Server/#comment-les-services-sont-impletes-du-cote-du-serveur","text":"","title":"Comment les services sont impletes du cote du Serveur"},{"location":"Services_actions_reactions/","text":"The project requires that the Web/Mobile platforms contain services that interact with each other. When we take a service it has a certain number of actions and reactions are applied to these actions. Among the number of services, actions and reactions we can cite: Github GitHub is a collaborative development platform based on Git. It allows developers to store, manage and share their source code projects. Users can contribute to projects by proposing changes and submitting merge requests. GitHub facilitates version tracking, collaboration between developers and offers features for software project management. Actions: -> a new pull request is opened. -> a new pull request is closed. -> new issue is created. -> issue is closed. -> issue is reopened. Reactions: -> create a new issue on repo specifie. -> create a new repository. Gitlab GitLab is a software development platform similar to GitHub, which offers project management and version control features based on Git. Developers can store, collaborate and share their source code. GitLab also offers additional features such as issue tracking, continuous integration, and automated deployment. It can be used as a cloud service or installed locally on a server. GitLab is popular for its flexibility and comprehensive management of the software development lifecycle. Actions: -> a new pull request is opened. -> a new pull request is closed. -> new issue is created. -> issue is closed. -> issue is reopened. Reactions: -> create a new issue on repo specifie. -> create a new repository. Twitter Twitter est une plateforme de m\u00e9dias sociaux o\u00f9 les utilisateurs peuvent publier des messages courts appel\u00e9s \"tweets\". Les tweets peuvent inclure du texte, des images, des vid\u00e9os et des liens. Les utilisateurs peuvent suivre d'autres personnes pour voir leurs tweets dans leur fil d'actualit\u00e9. Twitter est connu pour son format concis, son flux d'informations en temps r\u00e9el et sa capacit\u00e9 \u00e0 g\u00e9n\u00e9rer des discussions publiques et des tendances. Actions: -> post a new tweet. -> Reactions: -> Linkedin LinkedIn est un r\u00e9seau social professionnel ax\u00e9 sur les relations et les opportunit\u00e9s de carri\u00e8re. Les utilisateurs cr\u00e9ent des profils d\u00e9taill\u00e9s mettant en avant leurs comp\u00e9tences, leur exp\u00e9rience et leurs formations. Ils peuvent se connecter avec d'autres professionnels, rejoindre des groupes et partager des articles et des opportunit\u00e9s d'emploi. LinkedIn est utilis\u00e9 pour \u00e9tablir des contacts professionnels, rechercher des emplois, recruter des talents et d\u00e9velopper son r\u00e9seau professionnel. C'est une plateforme essentielle pour le d\u00e9veloppement de carri\u00e8re et la mise en relation professionnelle. Actions: Reactions: Reddit Reddit is a social media platform where users can share, discuss, and vote on content. Posts are organized into communities called \"subreddits\". Users can subscribe to subreddits that interest them and vote on posts. Reddit is known for its lively discussions and commenting system. It's a place where users can ask questions, share tips, and interact with others with similar interests. Actions: Reactions: -> make a new post on reddit. Google Gmail Google Gmail is a free email service provided by Google. It offers users a personal email address with generous storage capacity. Gmail offers a user-friendly interface and many features such as advanced search, organizing emails by labels, the ability to group conversations and integration with other Google services such as Google Drive and Google Calendar. It is widely used for both personal and business purposes due to its reliability, security and ease of use. Actions: Reactions: -> send a new email. -> Spotify Spotify is a music streaming platform that allows users to listen to music online. Users can access a vast library of songs, albums and playlists from artists around the world. Spotify offers a personalized experience through recommendations based on each user's musical tastes. It is available on multiple devices, including smartphones, computers and smart speakers. Spotify also offers a premium subscription option to remove ads and access additional features such as offline playback. It is a very popular platform that has revolutionized the way people listen to music. Actions: Reactions: Discord Discord est une plateforme de communication en ligne ax\u00e9e sur les communaut\u00e9s de joueurs et les groupes de discussion. Les utilisateurs peuvent cr\u00e9er des serveurs, rejoindre des canaux vocaux et textuels pour interagir avec d'autres membres. Discord offre des fonctionnalit\u00e9s telles que la messagerie instantan\u00e9e, les appels vocaux et vid\u00e9o, le partage d'\u00e9cran et la possibilit\u00e9 de diffuser en direct des jeux. Il est utilis\u00e9 par les joueurs, les cr\u00e9ateurs de contenu, les communaut\u00e9s en ligne et m\u00eame les entreprises pour faciliter la communication et la collaboration. Discord est appr\u00e9ci\u00e9 pour sa convivialit\u00e9, sa fiabilit\u00e9 et son large \u00e9ventail de fonctionnalit\u00e9s. Actions: Reactions: Google Calendar Google Calendar est un service de calendrier en ligne fourni par Google. Il permet aux utilisateurs de planifier, d'organiser et de suivre leurs \u00e9v\u00e9nements, r\u00e9unions et rendez-vous. Les utilisateurs peuvent cr\u00e9er des \u00e9v\u00e9nements, d\u00e9finir des rappels, partager des calendriers avec d'autres personnes et recevoir des notifications. Google Calendar est synchronis\u00e9 avec d'autres services Google, tels que Gmail, pour faciliter la gestion des \u00e9v\u00e9nements. Il offre une interface conviviale et est accessible \u00e0 partir de diff\u00e9rents appareils, ce qui en fait un outil pratique pour g\u00e9rer son emploi du temps et rester organis\u00e9. Actions: Reactions:","title":"Services and Actions/Reactions"},{"location":"getting_started/","text":"AREA \ud83c\udf0e Welcome to the documentation of Area \ud83c\udf89 Here you'll find everything you need to know about the project, its features and how to use it! AREA is an academic project of the third year of EPITECH. It is a project which requires the establishment of a website and a mobile platform both interacting with a server. That said,students carrying out this project will have to choose a stack (a set of tools) in accordance with the functionalities of the project. Goal of the project \ud83c\udfaf The goal of the project is therefore to have a platform that works a bit like IFFT/Zapier. IFTTT works on the principle \u201cIf this, then that\u201d. It allows you to create applets, which are simple rules specifying a condition (the \"if\") in one application or service, and an action to be performed (the \"then\") in another application or service. For example, you can set up an applet that says: \"If I post a photo to Instagram (condition), then automatically save this photo to my Google Drive folder (action).\" IFTTT will take care of monitoring your Instagram account and as soon as it detects a new published photo, it will perform the action of saving this photo to your Google Drive folder. The operating principle of our platform will be the same. On the platform we must be able to connect to services, link actions from one service to that of another and create an Area. The project being substantial, it is divided into three parts: A Server : which implements all the functionalities of the project. A Web Client : which runs in the browser and which queries the server. A Mobile Client : which works on the phone and which also queries the server. Project Organisation \ud83d\udcca The first defense (2nd week after the start of the Project) - Schedule: The goal here is to have experienced different tech stacks and languages and choose the best one to get the job done. In addition, for the first defense, the organization of the group must already be defined. Likewise a Poc of the different technologies used is evaluated. The second defense (4th week) - Minimum Viable Product: The goal here is to demonstrate the architecture put in place for the realization of the project and implemented the basic concepts (making different APIs interact with each other). In addition, planning must be adjusted to the reality of the work carried out on the project. Analyzes and changes will be requested and evaluated. Final defense (after 7 weeks of work) - Final Product: The goal here is to have finished the project with as many features as possible (different types of services, interesting interactions, good user interface, deployment via docker, . . .). The project presentation will also be evaluated as well as an analysis of what went right and wrong during the development of the project and what was learned along the way. \u200b Requirement \ud83d\udccc For the project it is necessary to implement a certain number of services. But the number of services to integrate is equal to the number of people present in the group plus one. So we have 7 services to implement and 18 actions/reactions. Technologie Used \ud83d\udd29 For the realization of this project we opted for the choice of the MERN stack which consists of MongoDB, Express JS, React and finally Node Js. MongoDB : The MongoDB database is a NoSQL database and at first glance its format is easier to use than a relational database. With MongoDB data is stored in a type of JSON format called BSON. Express Js : Express Js is a Node Js framework designed to create cross-platform APIs, web applications and mobile applications. In the case of our project the server is designed using this framework. React : React is a JavaScript framework used to create user interfaces for web and mobile applications. We implement the front end with this framework. NodeJs : We chose this stack because some of us had already used certain technologies from this stack. About the distribution of stains \u2753 To carry out the project we divided the team into three categories: those responsible for the backend. those responsible for the front end. those responsible for competition via Docker. That said, at the front end level on the Web side we have Mouammar ADJAHO and Cirine FELIHO who worked together so that the user experience is the best possible without affecting the Browser used by the Client. On the Frontend Mobile side, Lucia CODJIA is in charge. She also ensures that the visual rendering is attractive and that the user experience is as attractive as possible. At the Backend level we have Fitzerald ADECHIAN, Wilfrid BINAZON, Hansly AGBAMATE. Fitzerald took care of the implementation of certain services including Github, Discord, Reedit, etc.. In addition to the services he took care of the compilation of the project via Docker. He also participated in linking the work of the different members. Basically it emerged the work of the different members of the group. Hansly AGBAMATE took care of database administration, oAuth authentication and certain Google services (Gmail, Google Calendar). Wilfrid BINAZON as project manager took care of the good progress and administration of the tasks. In addition he took care of the documentation, the implementation of the swagger and the implementation of certain services including Gitlab and Spotify. For more information about the members of the Group, please go to the Contributor \ud83e\udd1d section. Keywords: \ud83d\udd11 Action: An event that starts your workflow, made available by an integration AREA: The name of the project, which stands for Action REAction Reaction: An event a workflow performs after it starts. Workflow: A combination of an Action and one or several Reactions that can be created in the web or mobile interface. Workflows allow you to use the plethora of integrations available in Area to create the perfect automation for you use-cases.","title":"Getting Started"},{"location":"getting_started/#area","text":"Welcome to the documentation of Area \ud83c\udf89 Here you'll find everything you need to know about the project, its features and how to use it! AREA is an academic project of the third year of EPITECH. It is a project which requires the establishment of a website and a mobile platform both interacting with a server. That said,students carrying out this project will have to choose a stack (a set of tools) in accordance with the functionalities of the project.","title":" AREA  \ud83c\udf0e"},{"location":"getting_started/#goal-of-the-project","text":"The goal of the project is therefore to have a platform that works a bit like IFFT/Zapier. IFTTT works on the principle \u201cIf this, then that\u201d. It allows you to create applets, which are simple rules specifying a condition (the \"if\") in one application or service, and an action to be performed (the \"then\") in another application or service. For example, you can set up an applet that says: \"If I post a photo to Instagram (condition), then automatically save this photo to my Google Drive folder (action).\" IFTTT will take care of monitoring your Instagram account and as soon as it detects a new published photo, it will perform the action of saving this photo to your Google Drive folder. The operating principle of our platform will be the same. On the platform we must be able to connect to services, link actions from one service to that of another and create an Area. The project being substantial, it is divided into three parts: A Server : which implements all the functionalities of the project. A Web Client : which runs in the browser and which queries the server. A Mobile Client : which works on the phone and which also queries the server.","title":" Goal of the project  \ud83c\udfaf"},{"location":"getting_started/#project-organisation","text":"The first defense (2nd week after the start of the Project) - Schedule: The goal here is to have experienced different tech stacks and languages and choose the best one to get the job done. In addition, for the first defense, the organization of the group must already be defined. Likewise a Poc of the different technologies used is evaluated. The second defense (4th week) - Minimum Viable Product: The goal here is to demonstrate the architecture put in place for the realization of the project and implemented the basic concepts (making different APIs interact with each other). In addition, planning must be adjusted to the reality of the work carried out on the project. Analyzes and changes will be requested and evaluated. Final defense (after 7 weeks of work) - Final Product: The goal here is to have finished the project with as many features as possible (different types of services, interesting interactions, good user interface, deployment via docker, . . .). The project presentation will also be evaluated as well as an analysis of what went right and wrong during the development of the project and what was learned along the way. \u200b","title":" Project Organisation  \ud83d\udcca"},{"location":"getting_started/#requirement","text":"For the project it is necessary to implement a certain number of services. But the number of services to integrate is equal to the number of people present in the group plus one. So we have 7 services to implement and 18 actions/reactions.","title":" Requirement  \ud83d\udccc"},{"location":"getting_started/#technologie-used","text":"For the realization of this project we opted for the choice of the MERN stack which consists of MongoDB, Express JS, React and finally Node Js. MongoDB : The MongoDB database is a NoSQL database and at first glance its format is easier to use than a relational database. With MongoDB data is stored in a type of JSON format called BSON. Express Js : Express Js is a Node Js framework designed to create cross-platform APIs, web applications and mobile applications. In the case of our project the server is designed using this framework. React : React is a JavaScript framework used to create user interfaces for web and mobile applications. We implement the front end with this framework. NodeJs : We chose this stack because some of us had already used certain technologies from this stack.","title":" Technologie Used   \ud83d\udd29"},{"location":"getting_started/#about-the-distribution-of-stains","text":"To carry out the project we divided the team into three categories: those responsible for the backend. those responsible for the front end. those responsible for competition via Docker. That said, at the front end level on the Web side we have Mouammar ADJAHO and Cirine FELIHO who worked together so that the user experience is the best possible without affecting the Browser used by the Client. On the Frontend Mobile side, Lucia CODJIA is in charge. She also ensures that the visual rendering is attractive and that the user experience is as attractive as possible. At the Backend level we have Fitzerald ADECHIAN, Wilfrid BINAZON, Hansly AGBAMATE. Fitzerald took care of the implementation of certain services including Github, Discord, Reedit, etc.. In addition to the services he took care of the compilation of the project via Docker. He also participated in linking the work of the different members. Basically it emerged the work of the different members of the group. Hansly AGBAMATE took care of database administration, oAuth authentication and certain Google services (Gmail, Google Calendar). Wilfrid BINAZON as project manager took care of the good progress and administration of the tasks. In addition he took care of the documentation, the implementation of the swagger and the implementation of certain services including Gitlab and Spotify. For more information about the members of the Group, please go to the Contributor \ud83e\udd1d section.","title":" About the distribution of stains  \u2753"},{"location":"getting_started/#keywords","text":"Action: An event that starts your workflow, made available by an integration AREA: The name of the project, which stands for Action REAction Reaction: An event a workflow performs after it starts. Workflow: A combination of an Action and one or several Reactions that can be created in the web or mobile interface. Workflows allow you to use the plethora of integrations available in Area to create the perfect automation for you use-cases.","title":" Keywords: \ud83d\udd11"},{"location":"how_to_build/","text":"Project Construction The project has a docker-compose.yml file at the root of the repository which will be used to coordinate the deployment of all our services in Docker containers. Docker-compose has 3 services. mongo : For deploying the mongo database from the official mongo image. This service is exposed at por 27017 area_server : For deploying the backend server of the application. It builds a dockerfile contained in the Server folder, dockerfile which copies our application into the container and installs the dependencies. It exposes the server on port 8080 area_web_client : For the deployment of the area web client. It builds a dockerfile contained in the Client/Web folder. It exposes the web service on port 8081 You cannot launch all the services with the following command: sudo docker-compose up --build To launch only a specific service, use the following command: sudo docker-compose up service-name --build","title":"How to Build"},{"location":"how_to_build/#project-construction","text":"The project has a docker-compose.yml file at the root of the repository which will be used to coordinate the deployment of all our services in Docker containers. Docker-compose has 3 services. mongo : For deploying the mongo database from the official mongo image. This service is exposed at por 27017 area_server : For deploying the backend server of the application. It builds a dockerfile contained in the Server folder, dockerfile which copies our application into the container and installs the dependencies. It exposes the server on port 8080 area_web_client : For the deployment of the area web client. It builds a dockerfile contained in the Client/Web folder. It exposes the web service on port 8081 You cannot launch all the services with the following command: sudo docker-compose up --build To launch only a specific service, use the following command: sudo docker-compose up service-name --build","title":"Project Construction"}]}